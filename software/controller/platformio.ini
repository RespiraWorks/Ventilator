; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
boards_dir = platformio/build_config
default_envs = stm32
src_dir = ./

# Scope for variables that we reference below, but which don't have meaning to
# platformio.
[respiraworks]
stm32_build_flags =
  -fstrict-volatile-bitfields
  -mfpu=fpv4-sp-d16
  -mfloat-abi=hard
  -Wl,-Map,platformio/build_config/stm32.map
  -Wl,-u,vectors
  -Wl,-u,_init

[env]
lib_ldf_mode = deep+
lib_extra_dirs =
  ../common/libs
  ../common/generated_libs
  ../common/third_party
; TODO(jkff) It might be possible to use C++17 instead of gnu++17, but
; I hit some build errors, they didn't look too bad but with gnu++17
; they aren't there at all.
build_flags =
  -Icommon/include/
  -std=gnu++17
  -fno-exceptions
  -Wall
  -Werror
  -Wconversion
  -Wno-sign-conversion
  -Wno-sign-compare
build_unflags =
  -std=gnu++11
  -std=gnu++14
  -fpermissive
# Use a more recent GCC than default; some designated-initializer features are
# missing in platformio's default version.  The version named below corresponds
# to gcc 9.2.1 20191025.
#
# All versions are listed at
# https://bintray.com/platformio/dl-packages/toolchain-gccarmnoneeabi
platform_packages = toolchain-gccarmnoneeabi@>1.80301.190214
extra_scripts = pre:platformio/build_config/auto_firmware_version.py

check_tool = cppcheck, clangtidy
check_flags =
  ; quieting missingIncludeSystem (which is not an error in our code), unusedFunction (which is true of all interrupt-called functions)
  ; and unmatchedSuppression (which would otherwise trigger for every file where one of the suppressed messages isn't present)
  ; This helps with output readability.
  cppcheck: --enable=all --std=c++17 --suppress=missingIncludeSystem --suppress=unmatchedSuppression --suppress=unusedFunction
  ; The actual checks are defined in .clang-tidy.
  clangtidy: --checks='-*' --extra-arg-before=-xc++ --extra-arg-before=-std=c++17 --extra-arg-before=-Wno-pragma-once-outside-header
check_patterns =
  ../controller/lib
  ../controller/src
  ../controller/src_test
  ../controller/integration_tests
  ../common/libs
  ../common/test_libs
  ; Do not include ../common/generated_libs
  ; Do not include ../common/third_party

[env:stm32]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
board_build.ldscript = platformio/build_config/stm32_ldscript.ld
extra_scripts =
  ${env.extra_scripts}
  pre:platformio/build_config/stm32_scripts.py
src_filter = +<src/>

# todo: deprecated, should be removed once UART DMA is implemented
[env:stm32-uart]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DUART_VIA_DMA
board_build.ldscript = platformio/build_config/stm32_ldscript.ld
extra_scripts =
  ${env.extra_scripts}
  pre:platformio/build_config/stm32_scripts.py
src_filter = +<src/>

[env:integration-test]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DINTEGRATION_TEST_H='"${sysenv.INTEGRATION_TEST_H}"'
  -DTEST_PARAM_1=${sysenv.TEST_PARAM_1}
  -DTEST_PARAM_2=${sysenv.TEST_PARAM_2}
  -DTEST_PARAM_3=${sysenv.TEST_PARAM_3}
  -DTEST_PARAM_4=${sysenv.TEST_PARAM_4}
  -DTEST_PARAM_5=${sysenv.TEST_PARAM_5}
board_build.ldscript = platformio/build_config/stm32_ldscript.ld
extra_scripts =
  ${env.extra_scripts}
  pre:platformio/build_config/stm32_scripts.py
src_filter = +<integration_tests/>

[env:native]
platform = native
lib_extra_dirs =
  ${env.lib_extra_dirs}
  ../common/test_libs
; googletest requires pthread.
build_flags = ${env.build_flags} -DTEST_MODE -pthread -g --coverage -lgcov
lib_deps =
  googletest
; This is needed for the googletest lib_dep to work.  I don't understand why.
; https://community.platformio.org/t/gtest-not-working-on-pio-4-1/10465/7
lib_compat_mode = off
extra_scripts =
  ${env.extra_scripts}
  platformio/build_config/platformio_sanitizers.py
src_filter = +<src/>
