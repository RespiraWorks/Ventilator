/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#define PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* See
 https://docs.google.com/presentation/d/1DA1BQlCj8wNv60pGGzrldPfZBmr6WAH4WbrD4W7i43U
 for explanation of vent modes. */
typedef enum _VentMode { 
    VentMode_OFF = 0, 
    /* Every breath is triggered by the machine, at a fixed rate.

 Operational parameters:

   PEEP - peep_cm_h2o
   RR   - breaths_per_min
   PIP  - pip_cm_h2o
   I:E  - inspiratory_expiratory_ratio */
    VentMode_PRESSURE_CONTROL = 1, 
    /* Patients can trigger a breath for themselves so long as they exceed the
 minimum respiration rate.  Ventilator triggers exhalation at a fixed point
 after inhalation.

 Operational parameters:

   PEEP      - peep_cm_h2o
   min RR    - breaths_per_min (note, interpreted as a minimum here)
   PIP       - pip_cm_h2o
   I:E       - inspiratory_expiratory_ratio
   P-trigger - inspiratory_trigger_cm_h2o */
    VentMode_PRESSURE_ASSIST = 2, 
    /* TODO: Implement me! */
    VentMode_HIGH_FLOW_NASAL_CANNULA = 3 
} VentMode;

/* Struct definitions */
/* Sensor readings.

 To be consistent with the other names in this file, this message should be
 called SensorReadings.  But we have a C++ class called that, and without
 naming this one "Proto", it's going to be really hard to remember which is
 which. */
typedef struct _SensorsProto { 
    float patient_pressure_cm_h2o;
    float volume_ml;
    float flow_ml_per_min;
    float inflow_pressure_diff_cm_h2o;
    float outflow_pressure_diff_cm_h2o;
    /* Identifies the current breath among all breaths handled since controller
 startup. Increases when a new breath begins; can be used on the receiver
 side for detecting breath boundaries from subsampled or lossy data.
 Receiver MUST NOT assume that this identifier is increasing, or dense.
 It might decrease e.g. in case of controller restart, and might be sparse. */
    uint64_t breath_id;
    /* Offset that the controller added to measured flow when computing
 flow_ml_per_min, in an attempt to make the volume graph look "right".  If
 this is a large negative number, it may indicate a leak in the system. */
    float flow_correction_ml_per_min;
    float fio2;
} SensorsProto;

/* Values set by the ventilator operator. */
typedef struct _VentParams { 
    VentMode mode;
    uint32_t peep_cm_h2o; /* PEEP - positive end-expiratory pressure */
    uint32_t breaths_per_min; /* RR - respiratory rate */
    uint32_t pip_cm_h2o; /* PIP - peak inspiratory pressure */
    float inspiratory_expiratory_ratio; /* I:E */
    uint32_t inspiratory_trigger_cm_h2o; /* P-trigger */
    /* TODO(jlebar): Is ml/min the correct unit for this? */
    uint32_t expiratory_trigger_ml_per_min; /* V-trigger */
    /* A value between 0..1. Technically only values in [0.21, 1] are allowed. */
    float fio2;
} VentParams;

/* Periodically sent from the controller to the GUI. */
typedef struct _ControllerStatus { 
    /* milliseconds since controller started up. */
    uint64_t uptime_ms;
    /* Current params being used by the the controller.  This is used to ACK
 params sent by the GUI. */
    VentParams active_params;
    /* Current sensor readings. */
    SensorsProto sensor_readings;
    /* Patient pressure we're trying to achieve. */
    float pressure_setpoint_cm_h2o;
    /* Value in range [0, 1] indicating how fast we're spinning the fan. */
    float fan_power;
} ControllerStatus;

/* Periodically sent from the GUI to the controller. */
typedef struct _GuiStatus { 
    /* milliseconds since GUI started up. */
    uint64_t uptime_ms;
    /* Params set by GUI; this is a request to the controller to use these
 params. */
    VentParams desired_params;
} GuiStatus;


/* Helper constants for enums */
#define _VentMode_MIN VentMode_OFF
#define _VentMode_MAX VentMode_HIGH_FLOW_NASAL_CANNULA
#define _VentMode_ARRAYSIZE ((VentMode)(VentMode_HIGH_FLOW_NASAL_CANNULA+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define GuiStatus_init_default                   {0, VentParams_init_default}
#define ControllerStatus_init_default            {0, VentParams_init_default, SensorsProto_init_default, 0, 0}
#define VentParams_init_default                  {_VentMode_MIN, 0, 0, 0, 0, 0, 0, 0}
#define SensorsProto_init_default                {0, 0, 0, 0, 0, 0, 0, 0}
#define GuiStatus_init_zero                      {0, VentParams_init_zero}
#define ControllerStatus_init_zero               {0, VentParams_init_zero, SensorsProto_init_zero, 0, 0}
#define VentParams_init_zero                     {_VentMode_MIN, 0, 0, 0, 0, 0, 0, 0}
#define SensorsProto_init_zero                   {0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SensorsProto_patient_pressure_cm_h2o_tag 1
#define SensorsProto_volume_ml_tag               2
#define SensorsProto_flow_ml_per_min_tag         3
#define SensorsProto_inflow_pressure_diff_cm_h2o_tag 4
#define SensorsProto_outflow_pressure_diff_cm_h2o_tag 5
#define SensorsProto_breath_id_tag               6
#define SensorsProto_flow_correction_ml_per_min_tag 7
#define SensorsProto_fio2_tag                    8
#define VentParams_mode_tag                      1
#define VentParams_peep_cm_h2o_tag               3
#define VentParams_breaths_per_min_tag           4
#define VentParams_pip_cm_h2o_tag                5
#define VentParams_inspiratory_expiratory_ratio_tag 6
#define VentParams_inspiratory_trigger_cm_h2o_tag 8
#define VentParams_expiratory_trigger_ml_per_min_tag 9
#define VentParams_fio2_tag                      10
#define ControllerStatus_uptime_ms_tag           1
#define ControllerStatus_active_params_tag       2
#define ControllerStatus_sensor_readings_tag     3
#define ControllerStatus_pressure_setpoint_cm_h2o_tag 5
#define ControllerStatus_fan_power_tag           6
#define GuiStatus_uptime_ms_tag                  1
#define GuiStatus_desired_params_tag             2

/* Struct field encoding specification for nanopb */
#define GuiStatus_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   uptime_ms,         1) \
X(a, STATIC,   REQUIRED, MESSAGE,  desired_params,    2)
#define GuiStatus_CALLBACK NULL
#define GuiStatus_DEFAULT NULL
#define GuiStatus_desired_params_MSGTYPE VentParams

#define ControllerStatus_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT64,   uptime_ms,         1) \
X(a, STATIC,   REQUIRED, MESSAGE,  active_params,     2) \
X(a, STATIC,   REQUIRED, MESSAGE,  sensor_readings,   3) \
X(a, STATIC,   REQUIRED, FLOAT,    pressure_setpoint_cm_h2o,   5) \
X(a, STATIC,   REQUIRED, FLOAT,    fan_power,         6)
#define ControllerStatus_CALLBACK NULL
#define ControllerStatus_DEFAULT NULL
#define ControllerStatus_active_params_MSGTYPE VentParams
#define ControllerStatus_sensor_readings_MSGTYPE SensorsProto

#define VentParams_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    mode,              1) \
X(a, STATIC,   REQUIRED, UINT32,   peep_cm_h2o,       3) \
X(a, STATIC,   REQUIRED, UINT32,   breaths_per_min,   4) \
X(a, STATIC,   REQUIRED, UINT32,   pip_cm_h2o,        5) \
X(a, STATIC,   REQUIRED, FLOAT,    inspiratory_expiratory_ratio,   6) \
X(a, STATIC,   REQUIRED, UINT32,   inspiratory_trigger_cm_h2o,   8) \
X(a, STATIC,   REQUIRED, UINT32,   expiratory_trigger_ml_per_min,   9) \
X(a, STATIC,   REQUIRED, FLOAT,    fio2,             10)
#define VentParams_CALLBACK NULL
#define VentParams_DEFAULT NULL

#define SensorsProto_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    patient_pressure_cm_h2o,   1) \
X(a, STATIC,   REQUIRED, FLOAT,    volume_ml,         2) \
X(a, STATIC,   REQUIRED, FLOAT,    flow_ml_per_min,   3) \
X(a, STATIC,   REQUIRED, FLOAT,    inflow_pressure_diff_cm_h2o,   4) \
X(a, STATIC,   REQUIRED, FLOAT,    outflow_pressure_diff_cm_h2o,   5) \
X(a, STATIC,   REQUIRED, UINT64,   breath_id,         6) \
X(a, STATIC,   REQUIRED, FLOAT,    flow_correction_ml_per_min,   7) \
X(a, STATIC,   REQUIRED, FLOAT,    fio2,              8)
#define SensorsProto_CALLBACK NULL
#define SensorsProto_DEFAULT NULL

extern const pb_msgdesc_t GuiStatus_msg;
extern const pb_msgdesc_t ControllerStatus_msg;
extern const pb_msgdesc_t VentParams_msg;
extern const pb_msgdesc_t SensorsProto_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define GuiStatus_fields &GuiStatus_msg
#define ControllerStatus_fields &ControllerStatus_msg
#define VentParams_fields &VentParams_msg
#define SensorsProto_fields &SensorsProto_msg

/* Maximum encoded size of messages (where known) */
#define ControllerStatus_size                    113
#define GuiStatus_size                           55
#define SensorsProto_size                        46
#define VentParams_size                          42

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
