syntax = "proto2";

import "nanopb.proto";

// # Overview
//
// This file defines messages sent between the ventilator's microcontroller and
// the computer controlling its GUI.
//
// The basic protocol is: Continuously on a timer, the microcontroller sends
// the GUI a ControllerState message, capturing everything the controller knows
// about the world.  And continuously on a timer, the GUI sends a GuiState
// message to the controller, capturing everything *it* knows about the world.
//
// There are no ACKs; ControllerState and GuiState are themselves the ACKs.
// For example, to set a PEEP value, GuiState modifies its VentParams field and
// sends the updated GuiState to the controller.  When the controller receives
// the GuiState with the new PEEP value, it updates the VentParams field in its
// ControllerState and sends it along.  The GUI can then verify that the
// controller received its message.
//
// There are also no retries in this protocol.  If a message gets dropped,
// well, we're going to send another one soon anyway.
//
// # Regenerating the C code
//
// When you modify this file you also need to regenerate the C code.  On my
// Mac:
//
//  $ brew install nanopb-generator
//  $ pip3 install protobuf
//  $ cd common/libs/network_protocol
//  $ protoc \
//      --plugin=/usr/local/Cellar/nanopb-generator/0.4.1/bin/protoc-gen-nanopb
//      \
//      -I/usr/local/Cellar/nanopb-generator/0.4.1/libexec/proto -I. \
//      --nanopb_out=. network_protocol.proto
//
// # Note about optional vs. required fields
//
// That this proto uses required fields instead of optional fields.  At Google,
// required fields are generally considered harmful, and in fact the notion of
// required fields was entirely removed in proto3.  (We're using proto2.) So
// this choice calls for some justification.
//
// Required fields are required; if a protobuf is missing a required field, it
// fails to deserialize.  This can make it difficult to change a protobuf.  If
// the sender and receiver can have different versions of the protobuf, you can
// never add or remove a required field, because then the proto may fail to
// deserialize for want of the required field you just added/removed.
//
// We use required fields in this project for the simple reason that the nanopb
// api for required fields is much more convenient.  In particular, every
// optional field is represented as two C struct fields, whereas required
// fields require only one C struct field:
//
//   // proto
//   messsage Foo {
//     optional int32 opt = 1;
//     required int32 req = 2;
//   }
//
//   // generated C code
//   struct Foo {
//     bool has_opt;
//     int32_t opt;
//     int32_t req;
//   }
//
// Not only do the optional fields take up more RAM, they're also harder to
// work with, because you always have to check `has_opt` before reading `opt`,
// and you always have to set has_opt before writing `opt`.
//
// Mismatches between proto versions is not an issue for us; we'll simply
// ensure that both sides always have the same version.  This is somewhat
// constraining, but better that than reasoning about what happens when X new
// field is missing on one side or the other.

// Periodically sent from the GUI to the controller.
message GuiStatus {
  // milliseconds since GUI started up.
  required uint64 uptime_ms = 1;

  // Params set by GUI; this is a request to the controller to use these
  // params.
  required VentParams desired_params = 2;

  // Active alarms fired by the controller.  This is used to ACK the
  // controller's alarms.
  //
  // TODO: The max number of alarms wasn't chosen carefully.
  // The max here should match ControllerStatus.controller_alarms's max.
  repeated Alarm acked_alarms = 3 [ (nanopb).max_count = 4 ];

  // TODO: Include some sort of code version, e.g. git sha that the gui was
  // built from?
}

// Periodically sent from the controller to the GUI.
message ControllerStatus {
  // milliseconds since controller started up.
  required uint64 uptime_ms = 1;

  // Current params being used by the the controller.  This is used to ACK
  // params sent by the GUI.
  required VentParams active_params = 2;

  // Current sensor readings.
  required SensorsProto sensor_readings = 3;

  // Active alarms fired by the controller.
  //
  // TODO: The max number of alarms wasn't chosen carefully.
  // The max here should match GuiStatus.controller_alarms's max.
  repeated Alarm controller_alarms = 4 [ (nanopb).max_count = 4 ];

  // Pressure we're trying to achieve with the fan.
  required float fan_setpoint_cm_h2o = 5;

  // Value in range [0, 1] indicating how fast we're spinning the fan.
  required float fan_power = 6;

  // TODO: Include some sort of code version, e.g. git sha that the controller
  // was built from?
}

// Values set by the ventilator operator.
message VentParams {
  required VentMode mode = 1;

  // For more info on these terms, see
  // https://github.com/RespiraWorks/VentilatorSoftware/wiki/Ventilator-Glossary

  required uint32 peep_cm_h2o = 3; // PEEP - positive end-expiratory pressure
  required uint32 breaths_per_min = 4; // RR - respiratory rate
  required uint32 pip_cm_h2o = 5;      // PIP - peak inspiratory pressure
  required float inspiratory_expiratory_ratio = 6; // I:E
  required uint32 rise_time_ms = 7; // time to reach inspiratory press. plateau

  required uint32 inspiratory_trigger_cm_h2o = 8; // P-trigger

  // TODO(jlebar): Is ml/min the correct unit for this?
  required uint32 expiratory_trigger_ml_per_min = 9; // V-trigger

  // Notably missing here is FiO2 -- fraction of oxygen in inhaled air.
  // Currently (2020-04-27) we anticipate this will be controlled externally,
  // not within the ventilator.

  // Alarm if tidal volume falls outside this range.
  required uint32 alarm_lo_tidal_volume_ml = 10;
  required uint32 alarm_hi_tidal_volume_ml = 11;

  // Alarm if respiratory rate falls outside this range.
  required uint32 alarm_lo_breaths_per_min = 12;
  required uint32 alarm_hi_breaths_per_min = 13;
}

// See
// https://docs.google.com/presentation/d/1DA1BQlCj8wNv60pGGzrldPfZBmr6WAH4WbrD4W7i43U
// for explanation of vent modes.
enum VentMode {
  OFF = 0;

  // Every breath is triggered by the machine, at a fixed rate.
  //
  // Operational parameters:
  //
  //   PEEP - peep_cm_h2o
  //   RR   - breaths_per_min
  //   PIP  - pip_cm_h2o
  //   I:E  - inspiratory_expiratory_ratio
  //
  // Alarm parameters:
  //
  //   alarm_lo_tidal_volume_ml
  //   alarm_hi_tidal_volume_ml
  //
  PRESSURE_CONTROL = 1;

  // Patients can trigger a breath for themselves so long as they exceed the
  // minimum respiration rate.  Ventilator triggers exhalation at a fixed point
  // after inhalation.
  //
  // Operational parameters:
  //
  //   PEEP      - peep_cm_h2o
  //   min RR    - breaths_per_min (note, interpreted as a minimum here)
  //   PIP       - pip_cm_h2o
  //   I:E       - inspiratory_expiratory_ratio
  //   P-trigger - inspiratory_trigger_cm_h2o
  //
  // Alarm parameters:
  //
  //   alarm_lo_tidal_volume_ml
  //   alarm_hi_tidal_volume_ml
  //   alarm_hi_breaths_per_min
  //
  PRESSURE_ASSIST = 2;

  // TODO: Implement me!
  // ADAPTIVE_CONTROL_BREATH = 3;
}

// Sensor readings.
//
// To be consistent with the other names in this file, this message should be
// called SensorReadings.  But we have a C++ class called that, and without
// naming this one "Proto", it's going to be really hard to remember which is
// which.
message SensorsProto {
  required float patient_pressure_cm_h2o = 1;
  required float volume_ml = 2;
  required float flow_ml_per_min = 3;
  required float inflow_pressure_diff_cm_h2o = 4;
  required float outflow_pressure_diff_cm_h2o = 5;
}

enum AlarmKind {
  RESPIRATORY_RATE_TOO_LOW = 1;
  RESPIRATORY_RATE_TOO_HIGH = 2;
  TIDAL_VOLUME_TOO_LOW = 3;
  TIDAL_VOLUME_TOO_HIGH = 4;
}

message Alarm {
  // Relative to uptime_ms of the device that fired the alarm.
  required uint64 start_time = 1;
  required AlarmKind kind = 2;
}
