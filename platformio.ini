; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
include_dir = controller/include
src_dir = controller
test_dir = controller/test
lib_dir = controller/lib
default_envs = stm32

# Scope for variables that we reference below, but which don't have meaning to
# platformio.
[respiraworks]
stm32_build_flags =
  -fstrict-volatile-bitfields
  -mfpu=fpv4-sp-d16
  -mfloat-abi=hard
  -Wl,-Map,stm32.map
  -Wl,-u,vectors
  -Wl,-u,_init

[env]
lib_ldf_mode = deep+
lib_extra_dirs =
  common/libs
  common/generated_libs
  common/third_party
; TODO(jkff) It might be possible to use C++17 instead of gnu++17, but
; I hit some build errors, they didn't look too bad but with gnu++17
; they aren't there at all.
build_flags =
  -Icommon/include/
  -std=gnu++17
  -fno-exceptions
  -Wall
  -Werror
  -Wconversion
  -Wno-sign-conversion
  -Wno-sign-compare
build_unflags =
  -std=gnu++11
  -std=gnu++14
  -fpermissive

[env:stm32]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src_test/> -<integration_tests/>

# Experimental integration test for STM32 with DMA-based communication.
[env:stm32-test]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DUART_VIA_DMA
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src/> +<src_test/> -<integration_tests/>

[env:int-test-blower]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DBLOWER_TEST
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src/> -<src_test/> +<integration_tests/>

[env:int-test-solenoid]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DSOLENOID_TEST
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src/> -<src_test/> +<integration_tests/>

[env:int-test-stepper]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DSTEPPER_TEST
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src/> -<src_test/> +<integration_tests/>

[env:int-test-pinch-valve]
platform = ststm32
board = custom_stm32
build_flags =
  ${env.build_flags}
  ${respiraworks.stm32_build_flags}
  -DBARE_STM32
  -DPINCH_VALVE_TEST
board_build.ldscript = boards/stm32_ldscript.ld
extra_scripts = pre:boards/stm32_scripts.py
src_filter = ${env.src_filter} -<test/> -<src/> -<src_test/> +<integration_tests/>

[env:native]
platform = native
lib_extra_dirs =
  ${env.lib_extra_dirs}
  common/test_libs
; googletest requires pthread.
build_flags = ${env.build_flags} -DTEST_MODE -pthread -g
lib_deps =
  googletest
; This is needed for the googletest lib_dep to work.  I don't understand why.
; https://community.platformio.org/t/gtest-not-working-on-pio-4-1/10465/7
lib_compat_mode = off
extra_scripts = platformio_sanitizers.py
src_filter = ${env.src_filter} -<src_test/> -<integration_tests/>

; Run clang-tidy only on native: it seems to get confused by headers that can
; only be parsed by gcc.
;
; TODO(jlebar): Is this still necessary now that we have dropped support for
; Uno?  If so, will it still be necessary when we drop support for Nucleo?
check_tool = clangtidy
check_flags =
  ; The actual checks are defined in .clang-tidy.
  clangtidy: --checks='-*' --extra-arg-before=-xc++ --extra-arg-before=-std=c++17
check_patterns =
  common/include
  common/libs
  common/test_libs
  ; Do not include common/generated_libs
  ; Do not include common/third_party
  controller
  gui
