/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#define PB_NETWORK_PROTOCOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _ControllerMsgType {
  ControllerMsgType_ACK = 16,
  ControllerMsgType_ERR_CHECK_SUM = 17,
  ControllerMsgType_ERR_MODE = 18,
  ControllerMsgType_ERR_CMD = 19,
  ControllerMsgType_STATUS = 32,
  ControllerMsgType_ALARM = 48,
  ControllerMsgType_DATA = 64
} ControllerMsgType;

typedef enum _CommandType {
  CommandType_SET_RR = 0,
  CommandType_GET_RR = 1,
  CommandType_SET_TV = 2,
  CommandType_GET_TV = 3,
  CommandType_SET_PEEP = 4,
  CommandType_GET_PEEP = 5,
  CommandType_SET_PIP = 6,
  CommandType_GET_PIP = 7,
  CommandType_SET_DWELL = 8,
  CommandType_GET_DWELL = 9,
  CommandType_SET_IR = 10,
  CommandType_GET_IR = 11,
  CommandType_GET_PRESSURE = 12,
  CommandType_GET_FLOW = 13,
  CommandType_GET_VOLUME = 14,
  CommandType_SET_KP = 32,
  CommandType_GET_KP = 33,
  CommandType_SET_KI = 34,
  CommandType_GET_KI = 35,
  CommandType_SET_KD = 36,
  CommandType_GET_KD = 37,
  CommandType_SET_BLOWER = 38,
  CommandType_RESET = 39,
  CommandType_SET_SOLENOID = 40,
  CommandType_SET_TX_RATE = 64,
  CommandType_GET_TX_RATE = 65,
  CommandType_SET_CONTROLLER_MODE = 66,
  CommandType_GET_CONTROLLER_MODE = 67,
  CommandType_COMM_CHECK = 68,
  CommandType_SET_VENTILATOR_MODE = 69,
  CommandType_GET_VENTILATOR_MODE = 70,
  CommandType_START_VENTILATOR = 71,
  CommandType_STOP_VENTILATOR = 72,
  CommandType_NONE = 255
} CommandType;

typedef enum _AlarmType { AlarmType_TO_BE_DEFINED = 0 } AlarmType;

typedef enum _AlarmLevelType {
  AlarmLevelType_LOW = 0,
  AlarmLevelType_MEDIUM = 1,
  AlarmLevelType_HIGH = 2
} AlarmLevelType;

/* Struct definitions */
typedef struct _Command {
  CommandType cmd;
  bool has_data;
  float data;
} Command;

typedef struct _ControlerAlarm {
  AlarmLevelType level;
  AlarmType type;
  pb_callback_t description;
} ControlerAlarm;

typedef struct _ControllerIdentification {
  uint64_t time;
  uint32_t version_fw;
  uint32_t version_hw;
  pb_callback_t about;
} ControllerIdentification;

typedef struct _ControllerStatus {
  uint64_t time;
  float pressure;
  float volume;
  float flow;
  uint32_t alarm_flags;
} ControllerStatus;

typedef struct _ControllerValue {
  bool has_value;
  float value;
} ControllerValue;

typedef struct _GuiAck {
  uint32_t type;
} GuiAck;

typedef struct _ControllerData {
  ControllerMsgType msg_type;
  CommandType response_to_cmd;
  pb_size_t which_payload;
  union {
    ControllerStatus status;
    ControllerIdentification identification;
    ControllerValue value;
    ControlerAlarm alert;
  } payload;
} ControllerData;

typedef struct _Packet {
  pb_size_t which_payload;
  union {
    Command cmd;
    GuiAck gui_ack;
    ControllerData data;
  } payload;
} Packet;

/* Helper constants for enums */
#define _ControllerMsgType_MIN ControllerMsgType_ACK
#define _ControllerMsgType_MAX ControllerMsgType_DATA
#define _ControllerMsgType_ARRAYSIZE                                           \
  ((ControllerMsgType)(ControllerMsgType_DATA + 1))

#define _CommandType_MIN CommandType_SET_RR
#define _CommandType_MAX CommandType_NONE
#define _CommandType_ARRAYSIZE ((CommandType)(CommandType_NONE + 1))

#define _AlarmType_MIN AlarmType_TO_BE_DEFINED
#define _AlarmType_MAX AlarmType_TO_BE_DEFINED
#define _AlarmType_ARRAYSIZE ((AlarmType)(AlarmType_TO_BE_DEFINED + 1))

#define _AlarmLevelType_MIN AlarmLevelType_LOW
#define _AlarmLevelType_MAX AlarmLevelType_HIGH
#define _AlarmLevelType_ARRAYSIZE ((AlarmLevelType)(AlarmLevelType_HIGH + 1))

/* Initializer values for message structs */
#define Command_init_default                                                   \
  { _CommandType_MIN, false, 0 }
#define GuiAck_init_default                                                    \
  { 0 }
#define ControllerStatus_init_default                                          \
  { 0, 0, 0, 0, 0 }
#define ControllerIdentification_init_default                                  \
  {                                                                            \
    0, 0, 0, { {NULL}, NULL }                                                  \
  }
#define ControlerAlarm_init_default                                            \
  {                                                                            \
    _AlarmLevelType_MIN, _AlarmType_MIN, { {NULL}, NULL }                      \
  }
#define ControllerValue_init_default                                           \
  { false, 0 }
#define ControllerData_init_default                                            \
  {                                                                            \
    _ControllerMsgType_MIN, _CommandType_MIN, 0, {                             \
      ControllerStatus_init_default                                            \
    }                                                                          \
  }
#define Packet_init_default                                                    \
  {                                                                            \
    0, { Command_init_default }                                                \
  }
#define Command_init_zero                                                      \
  { _CommandType_MIN, false, 0 }
#define GuiAck_init_zero                                                       \
  { 0 }
#define ControllerStatus_init_zero                                             \
  { 0, 0, 0, 0, 0 }
#define ControllerIdentification_init_zero                                     \
  {                                                                            \
    0, 0, 0, { {NULL}, NULL }                                                  \
  }
#define ControlerAlarm_init_zero                                               \
  {                                                                            \
    _AlarmLevelType_MIN, _AlarmType_MIN, { {NULL}, NULL }                      \
  }
#define ControllerValue_init_zero                                              \
  { false, 0 }
#define ControllerData_init_zero                                               \
  {                                                                            \
    _ControllerMsgType_MIN, _CommandType_MIN, 0, {                             \
      ControllerStatus_init_zero                                               \
    }                                                                          \
  }
#define Packet_init_zero                                                       \
  {                                                                            \
    0, { Command_init_zero }                                                   \
  }

/* Field tags (for use in manual encoding/decoding) */
#define Command_cmd_tag 1
#define Command_data_tag 2
#define ControlerAlarm_level_tag 1
#define ControlerAlarm_type_tag 2
#define ControlerAlarm_description_tag 3
#define ControllerIdentification_time_tag 1
#define ControllerIdentification_version_fw_tag 2
#define ControllerIdentification_version_hw_tag 3
#define ControllerIdentification_about_tag 4
#define ControllerStatus_time_tag 1
#define ControllerStatus_pressure_tag 2
#define ControllerStatus_volume_tag 3
#define ControllerStatus_flow_tag 4
#define ControllerStatus_alarm_flags_tag 5
#define ControllerValue_value_tag 1
#define GuiAck_type_tag 1
#define ControllerData_status_tag 3
#define ControllerData_identification_tag 4
#define ControllerData_value_tag 5
#define ControllerData_alert_tag 6
#define ControllerData_msg_type_tag 1
#define ControllerData_response_to_cmd_tag 2
#define Packet_cmd_tag 1
#define Packet_gui_ack_tag 2
#define Packet_data_tag 3

/* Struct field encoding specification for nanopb */
#define Command_FIELDLIST(X, a)                                                \
  X(a, STATIC, REQUIRED, UENUM, cmd, 1)                                        \
  X(a, STATIC, OPTIONAL, FLOAT, data, 2)
#define Command_CALLBACK NULL
#define Command_DEFAULT NULL

#define GuiAck_FIELDLIST(X, a) X(a, STATIC, REQUIRED, UINT32, type, 1)
#define GuiAck_CALLBACK NULL
#define GuiAck_DEFAULT NULL

#define ControllerStatus_FIELDLIST(X, a)                                       \
  X(a, STATIC, REQUIRED, UINT64, time, 1)                                      \
  X(a, STATIC, REQUIRED, FLOAT, pressure, 2)                                   \
  X(a, STATIC, REQUIRED, FLOAT, volume, 3)                                     \
  X(a, STATIC, REQUIRED, FLOAT, flow, 4)                                       \
  X(a, STATIC, REQUIRED, UINT32, alarm_flags, 5)
#define ControllerStatus_CALLBACK NULL
#define ControllerStatus_DEFAULT NULL

#define ControllerIdentification_FIELDLIST(X, a)                               \
  X(a, STATIC, REQUIRED, UINT64, time, 1)                                      \
  X(a, STATIC, REQUIRED, UINT32, version_fw, 2)                                \
  X(a, STATIC, REQUIRED, UINT32, version_hw, 3)                                \
  X(a, CALLBACK, OPTIONAL, STRING, about, 4)
#define ControllerIdentification_CALLBACK pb_default_field_callback
#define ControllerIdentification_DEFAULT NULL

#define ControlerAlarm_FIELDLIST(X, a)                                         \
  X(a, STATIC, REQUIRED, UENUM, level, 1)                                      \
  X(a, STATIC, REQUIRED, UENUM, type, 2)                                       \
  X(a, CALLBACK, OPTIONAL, STRING, description, 3)
#define ControlerAlarm_CALLBACK pb_default_field_callback
#define ControlerAlarm_DEFAULT NULL

#define ControllerValue_FIELDLIST(X, a) X(a, STATIC, OPTIONAL, FLOAT, value, 1)
#define ControllerValue_CALLBACK NULL
#define ControllerValue_DEFAULT NULL

#define ControllerData_FIELDLIST(X, a)                                         \
  X(a, STATIC, REQUIRED, UENUM, msg_type, 1)                                   \
  X(a, STATIC, REQUIRED, UENUM, response_to_cmd, 2)                            \
  X(a, STATIC, ONEOF, MESSAGE, (payload, status, payload.status), 3)           \
  X(a, STATIC, ONEOF, MESSAGE,                                                 \
    (payload, identification, payload.identification), 4)                      \
  X(a, STATIC, ONEOF, MESSAGE, (payload, value, payload.value), 5)             \
  X(a, STATIC, ONEOF, MESSAGE, (payload, alert, payload.alert), 6)
#define ControllerData_CALLBACK NULL
#define ControllerData_DEFAULT NULL
#define ControllerData_payload_status_MSGTYPE ControllerStatus
#define ControllerData_payload_identification_MSGTYPE ControllerIdentification
#define ControllerData_payload_value_MSGTYPE ControllerValue
#define ControllerData_payload_alert_MSGTYPE ControlerAlarm

#define Packet_FIELDLIST(X, a)                                                 \
  X(a, STATIC, ONEOF, MESSAGE, (payload, cmd, payload.cmd), 1)                 \
  X(a, STATIC, ONEOF, MESSAGE, (payload, gui_ack, payload.gui_ack), 2)         \
  X(a, STATIC, ONEOF, MESSAGE, (payload, data, payload.data), 3)
#define Packet_CALLBACK NULL
#define Packet_DEFAULT NULL
#define Packet_payload_cmd_MSGTYPE Command
#define Packet_payload_gui_ack_MSGTYPE GuiAck
#define Packet_payload_data_MSGTYPE ControllerData

extern const pb_msgdesc_t Command_msg;
extern const pb_msgdesc_t GuiAck_msg;
extern const pb_msgdesc_t ControllerStatus_msg;
extern const pb_msgdesc_t ControllerIdentification_msg;
extern const pb_msgdesc_t ControlerAlarm_msg;
extern const pb_msgdesc_t ControllerValue_msg;
extern const pb_msgdesc_t ControllerData_msg;
extern const pb_msgdesc_t Packet_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Command_fields &Command_msg
#define GuiAck_fields &GuiAck_msg
#define ControllerStatus_fields &ControllerStatus_msg
#define ControllerIdentification_fields &ControllerIdentification_msg
#define ControlerAlarm_fields &ControlerAlarm_msg
#define ControllerValue_fields &ControllerValue_msg
#define ControllerData_fields &ControllerData_msg
#define Packet_fields &Packet_msg

/* Maximum encoded size of messages (where known) */
#define Command_size 8
#define GuiAck_size 6
#define ControllerStatus_size 32
/* ControllerIdentification_size depends on runtime parameters */
/* ControlerAlarm_size depends on runtime parameters */
#define ControllerValue_size 5
/* ControllerData_size depends on runtime parameters */
/* Packet_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
