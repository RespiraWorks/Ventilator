; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
include_dir = controller/include
src_dir = controller/src
test_dir = controller/test
lib_dir = controller/lib
; Make `platformio run` build just env:uno.  We skip env:native for now because
; it doesn't build!
default_envs = stm32

[env]
lib_ldf_mode = deep+
lib_extra_dirs =
  common/libs
  common/generated_libs
  common/third_party
; TODO(jkff) It might be possible to use C++17 instead of gnu++17, but
; I hit some build errors, they didn't look too bad but with gnu++17
; they aren't there at all.
build_flags = -Icommon/include/ -std=gnu++17 -Wall -Werror
build_unflags =
  -std=gnu++11
  -fpermissive

[env:uno]
platform = atmelavr
board = uno
framework = arduino
platform_packages =
; A newer version of the toolchain than the default one, to support C++17.
  toolchain-atmelavr @1.70300.191015

[env:stm32]
platform = ststm32
board = custom_stm32
build_flags = -Icommon/include/ -std=gnu++17 -Wall -Werror -Wno-error=register -mfpu=fpv4-sp-d16 -mfloat-abi=hard -DBARE_STM32 -Wl,-Map,stm32.map -Wl,-u,vectors -Wl,-u,_init
board_build.ldscript = boards/stm32_ldscript.ld
build_unflags = -std=gnu11 -std=gnu++14
extra_scripts = boards/stm32_scripts.py

[env:native]
platform = native
lib_extra_dirs =
  common/libs
  common/generated_libs
  common/test_libs
  common/third_party
; googletest requires pthread.
build_flags = -Icommon/include/ -std=gnu++17 -DTEST_MODE -pthread -Wall -Werror
build_unflags = -std=gnu++11
lib_deps =
  googletest
; This is needed for the googletest lib_dep to work.  I don't understand why.
; https://community.platformio.org/t/gtest-not-working-on-pio-4-1/10465/7
lib_compat_mode = off
extra_scripts = platformio_sanitizers.py
; Run clang-tidy only on native: it seems to get confused by Uno headers that
; can only be parsed by gcc.
check_tool = clangtidy
check_flags =
  ; The actual checks are defined in .clang-tidy.
  clangtidy: --checks='-*' --extra-arg-before=-xc++ --extra-arg-before=-std=c++17
check_patterns =
  common/include
  common/libs
  common/test_libs
  ; Do not include common/generated_libs
  ; Do not include common/third_party
  controller
  gui
