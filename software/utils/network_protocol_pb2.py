# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: network_protocol.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import nanopb_pb2 as nanopb__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16network_protocol.proto\x1a\x0cnanopb.proto\"C\n\tGuiStatus\x12\x11\n\tuptime_ms\x18\x01 \x02(\x04\x12#\n\x0e\x64\x65sired_params\x18\x02 \x02(\x0b\x32\x0b.VentParams\"\xa6\x01\n\x10\x43ontrollerStatus\x12\x11\n\tuptime_ms\x18\x01 \x02(\x04\x12\"\n\ractive_params\x18\x02 \x02(\x0b\x32\x0b.VentParams\x12&\n\x0fsensor_readings\x18\x03 \x02(\x0b\x32\r.SensorsProto\x12 \n\x18pressure_setpoint_cm_h2o\x18\x05 \x02(\x02\x12\x11\n\tfan_power\x18\x06 \x02(\x02\"\xe6\x01\n\nVentParams\x12\x17\n\x04mode\x18\x01 \x02(\x0e\x32\t.VentMode\x12\x13\n\x0bpeep_cm_h2o\x18\x03 \x02(\r\x12\x17\n\x0f\x62reaths_per_min\x18\x04 \x02(\r\x12\x12\n\npip_cm_h2o\x18\x05 \x02(\r\x12$\n\x1cinspiratory_expiratory_ratio\x18\x06 \x02(\x02\x12\"\n\x1ainspiratory_trigger_cm_h2o\x18\x08 \x02(\r\x12%\n\x1d\x65xpiratory_trigger_ml_per_min\x18\t \x02(\r\x12\x0c\n\x04\x66io2\x18\n \x02(\x02\"\xeb\x01\n\x0cSensorsProto\x12\x1f\n\x17patient_pressure_cm_h2o\x18\x01 \x02(\x02\x12\x11\n\tvolume_ml\x18\x02 \x02(\x02\x12\x17\n\x0f\x66low_ml_per_min\x18\x03 \x02(\x02\x12#\n\x1binflow_pressure_diff_cm_h2o\x18\x04 \x02(\x02\x12$\n\x1coutflow_pressure_diff_cm_h2o\x18\x05 \x02(\x02\x12\x11\n\tbreath_id\x18\x06 \x02(\x04\x12\"\n\x1a\x66low_correction_ml_per_min\x18\x07 \x02(\x02\x12\x0c\n\x04\x66io2\x18\x08 \x02(\x02*[\n\x08VentMode\x12\x07\n\x03OFF\x10\x00\x12\x14\n\x10PRESSURE_CONTROL\x10\x01\x12\x13\n\x0fPRESSURE_ASSIST\x10\x02\x12\x1b\n\x17HIGH_FLOW_NASAL_CANNULA\x10\x03')

_VENTMODE = DESCRIPTOR.enum_types_by_name['VentMode']
VentMode = enum_type_wrapper.EnumTypeWrapper(_VENTMODE)
OFF = 0
PRESSURE_CONTROL = 1
PRESSURE_ASSIST = 2
HIGH_FLOW_NASAL_CANNULA = 3


_GUISTATUS = DESCRIPTOR.message_types_by_name['GuiStatus']
_CONTROLLERSTATUS = DESCRIPTOR.message_types_by_name['ControllerStatus']
_VENTPARAMS = DESCRIPTOR.message_types_by_name['VentParams']
_SENSORSPROTO = DESCRIPTOR.message_types_by_name['SensorsProto']
GuiStatus = _reflection.GeneratedProtocolMessageType('GuiStatus', (_message.Message,), {
  'DESCRIPTOR' : _GUISTATUS,
  '__module__' : 'network_protocol_pb2'
  # @@protoc_insertion_point(class_scope:GuiStatus)
  })
_sym_db.RegisterMessage(GuiStatus)

ControllerStatus = _reflection.GeneratedProtocolMessageType('ControllerStatus', (_message.Message,), {
  'DESCRIPTOR' : _CONTROLLERSTATUS,
  '__module__' : 'network_protocol_pb2'
  # @@protoc_insertion_point(class_scope:ControllerStatus)
  })
_sym_db.RegisterMessage(ControllerStatus)

VentParams = _reflection.GeneratedProtocolMessageType('VentParams', (_message.Message,), {
  'DESCRIPTOR' : _VENTPARAMS,
  '__module__' : 'network_protocol_pb2'
  # @@protoc_insertion_point(class_scope:VentParams)
  })
_sym_db.RegisterMessage(VentParams)

SensorsProto = _reflection.GeneratedProtocolMessageType('SensorsProto', (_message.Message,), {
  'DESCRIPTOR' : _SENSORSPROTO,
  '__module__' : 'network_protocol_pb2'
  # @@protoc_insertion_point(class_scope:SensorsProto)
  })
_sym_db.RegisterMessage(SensorsProto)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _VENTMODE._serialized_start=749
  _VENTMODE._serialized_end=840
  _GUISTATUS._serialized_start=40
  _GUISTATUS._serialized_end=107
  _CONTROLLERSTATUS._serialized_start=110
  _CONTROLLERSTATUS._serialized_end=276
  _VENTPARAMS._serialized_start=279
  _VENTPARAMS._serialized_end=509
  _SENSORSPROTO._serialized_start=512
  _SENSORSPROTO._serialized_end=747
# @@protoc_insertion_point(module_scope)
